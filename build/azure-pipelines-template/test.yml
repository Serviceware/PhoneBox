parameters:
- name: operatingSystem
  type: string
  values:
  - Linux
  - macOS
  - Windows
- name: configuration
  type: string
  values:
  - Debug
  - Release
- name: codeCoverageEngine
  type: string
  values:
  - Native
  - Cobertura
 
steps:
- task: DotNetCoreCLI@2
  displayName: 📈 Install ReportGenerator
  condition: succeededOrFailed()
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path $(Agent.TempDirectory) dotnet-reportgenerator-globaltool

- ${{ if eq(parameters.operatingSystem, 'Windows') }}:
  - template: test-initialize-localdb.yml
  - template: test-dotnet.yml
    parameters:
      projects:
      - PhoneBox.Server.Tests
      configuration: ${{ parameters.configuration }}
      codeCoverageEngine: ${{ parameters.codeCoverageEngine }}
      arguments: -e Database:ConnectionString="Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=PhoneBox;Integrated Security=True;"
- ${{ else }}:
  - template: test-dotnet.yml
    parameters:
      projects:
     #  Currently running SQL tests only on Windows, because sqllocaldb is not supported on linux
     #  It might be possible to use a vm with SQL server installed, have to look into it
      - PhoneBox.Server.Tests
      configuration: ${{ parameters.configuration }}
      codeCoverageEngine: Cobertura # Native (*.coverage) is only supported on Windows

- script: >
    $(Agent.TempDirectory)/reportgenerator
    -reports:$(Build.ArtifactStagingDirectory)/test/*.xml
    -targetdir:$(Build.ArtifactStagingDirectory)/test/Report
    -reporttypes:HtmlInline_AzurePipelines_Dark
  displayName: 🔗 Merge code coverage results (*.html)
  condition: succeededOrFailed()

- template: publish.yml
  parameters:
    artifact: Test output ($(operatingSystem))
    folder: test